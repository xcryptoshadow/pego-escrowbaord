// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol";

import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/// @custom:security-contact yousuf.hossain.shanto@gmail.com
contract EscrowHub is
    ReentrancyGuardUpgradeable,
    OwnableUpgradeable,
    UUPSUpgradeable
{
    using CountersUpgradeable for CountersUpgradeable.Counter;
    using StringsUpgradeable for uint256;

    enum EscrowState {
        AWAITING_DELIVERY,
        COMPLETED,
        CLAIMED_ON_EXPIRE,
        REFUNDED
    }

    struct Escrow {
        uint256 id;
        string cid;
        address buyer;
        address seller;
        uint256 amount;
        uint256 fee;
        uint256 createdAt;
        uint256 expireAt;
        uint256 clearAt;
        EscrowState state;
    }

    CountersUpgradeable.Counter private _escrowIds;
    mapping(uint256 => Escrow) private idToEscrow;
    mapping(address => uint256) private addressToEscrowCount;
    mapping(address => mapping(uint256 => uint256))
        private addressToEscrowIndexes;
    uint256 private constant _minimumEscrow = __ENV_MINIMUM_ESCROW__ ether;
    uint256 private constant _fee = __ENV_FEE__; // Fee In Percent

    IERC20 private constant TOKEN = IERC20(__ENV_TOKEN_ADDRESS__);

    event EscrowCreated(
        uint256 indexed escrowId,
        string cid,
        address buyer,
        address seller,
        uint256 indexed amount,
        uint256 indexed fee,
        uint256 expireAt,
        EscrowState state
    );

    event EscrowUpdated(
        uint256 indexed escrowId,
        uint256 indexed clearAt,
        EscrowState indexed state
    );

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    function initialize() public initializer {
        __ReentrancyGuard_init();
        __Ownable_init();
        __UUPSUpgradeable_init();
    }

    function _authorizeUpgrade(address newImplementation)
        internal
        override
        onlyOwner
    {}

    // Custom Code Area Begins
    modifier onlyBuyer(uint256 escrowId) {
        require(
            idToEscrow[escrowId].buyer == msg.sender,
            "Only Buyer Can Access"
        );
        _;
    }

    modifier onlySeller(uint256 escrowId) {
        require(
            idToEscrow[escrowId].seller == msg.sender,
            "Only Seller Can Access"
        );
        _;
    }

    modifier notBuyer(uint256 escrowId) {
        require(
            idToEscrow[escrowId].seller == msg.sender || owner() == msg.sender,
            "Only seller or Owner can perform this action"
        );
        _;
    }

    modifier transferable(uint256 _amount) {
        uint256 allowance = TOKEN.allowance(msg.sender, address(this));
        require(
            allowance >= _amount,
            "You don't have enough funds allowed for the transfer"
        );
        _;
    }

    function newEscrow(
        address _seller,
        uint256 _amount,
        string memory _cid,
        uint256 expireIn
    ) public transferable(_amount) nonReentrant {
        require(
            _amount >= _minimumEscrow,
            "Escrow must be larger then the minimum amount"
        );

        TOKEN.transferFrom(msg.sender, address(this), _amount);

        _escrowIds.increment();
        uint256 curId = _escrowIds.current();
        uint256 fee = (_amount * _fee) / 100;
        uint256 amount = _amount - fee;
        idToEscrow[curId] = Escrow(
            curId,
            _cid,
            msg.sender,
            _seller,
            amount,
            fee,
            block.timestamp,
            expireIn,
            0,
            EscrowState.AWAITING_DELIVERY
        );

        addressToEscrowCount[msg.sender] = addressToEscrowCount[msg.sender] + 1;
        addressToEscrowIndexes[msg.sender][
            addressToEscrowCount[msg.sender]
        ] = curId;
        addressToEscrowCount[_seller] = addressToEscrowCount[_seller] + 1;
        addressToEscrowIndexes[_seller][addressToEscrowCount[_seller]] = curId;

        emit EscrowCreated(
            curId,
            _cid,
            msg.sender,
            _seller,
            amount,
            fee,
            expireIn,
            EscrowState.AWAITING_DELIVERY
        );
    }

    function deliver(uint256 _escrowId)
        public
        onlyBuyer(_escrowId)
        nonReentrant
    {
        require(
            idToEscrow[_escrowId].state == EscrowState.AWAITING_DELIVERY,
            "You can't deliver this escrow. Already updated before"
        );

        TOKEN.transfer(
            idToEscrow[_escrowId].seller,
            idToEscrow[_escrowId].amount
        );
        TOKEN.transfer(owner(), idToEscrow[_escrowId].fee);

        idToEscrow[_escrowId].clearAt = block.timestamp;
        idToEscrow[_escrowId].state = EscrowState.COMPLETED;

        emit EscrowUpdated(_escrowId, block.timestamp, EscrowState.COMPLETED);
    }

    function claimAfterExpire(uint256 _escrowId)
        public
        onlySeller(_escrowId)
        nonReentrant
    {
        require(
            idToEscrow[_escrowId].expireAt <= block.timestamp,
            "Escrow isn't expired yet"
        );
        require(
            idToEscrow[_escrowId].state == EscrowState.AWAITING_DELIVERY,
            "You can't claim this escrow. Already updated before"
        );

        TOKEN.transfer(
            idToEscrow[_escrowId].seller,
            idToEscrow[_escrowId].amount
        );
        TOKEN.transfer(owner(), idToEscrow[_escrowId].fee);

        idToEscrow[_escrowId].clearAt = block.timestamp;
        idToEscrow[_escrowId].state = EscrowState.CLAIMED_ON_EXPIRE;

        emit EscrowUpdated(
            _escrowId,
            block.timestamp,
            EscrowState.CLAIMED_ON_EXPIRE
        );
    }

    function refund(uint256 _escrowId) public notBuyer(_escrowId) nonReentrant {
        require(
            idToEscrow[_escrowId].state == EscrowState.AWAITING_DELIVERY,
            "Can't refund this escrow. Already updated before"
        );

        TOKEN.transfer(
            idToEscrow[_escrowId].buyer,
            (idToEscrow[_escrowId].amount + idToEscrow[_escrowId].fee)
        );

        idToEscrow[_escrowId].clearAt = block.timestamp;
        idToEscrow[_escrowId].state = EscrowState.REFUNDED;

        emit EscrowUpdated(_escrowId, block.timestamp, EscrowState.REFUNDED);
    }

    /* Returns escrows based on roles */
    function fetchMyEscrows() public view returns (Escrow[] memory) {
        if (owner() == msg.sender) {
            uint256 totalItemCount = _escrowIds.current();
            Escrow[] memory items = new Escrow[](totalItemCount);
            for (uint256 i = 0; i < totalItemCount; i++) {
                items[i] = idToEscrow[i + 1];
            }
            return items;
        } else {
            // if signer is not owner
            Escrow[] memory items = new Escrow[](
                addressToEscrowCount[msg.sender]
            );
            for (uint256 i = 0; i < addressToEscrowCount[msg.sender]; i++) {
                items[i] = idToEscrow[
                    addressToEscrowIndexes[msg.sender][i + 1]
                ];
            }
            return items;
        }
    }

    function fetchEscrowsPaginated(uint256 cursor, uint256 perPageCount)
        public
        view
        returns (
            Escrow[] memory data,
            uint256 totalItemCount,
            bool hasNextPage,
            uint256 nextCursor
        )
    {
        uint256 length = perPageCount;
        if (owner() == msg.sender) {
            uint256 totalCount = _escrowIds.current();
            bool nextPage = true;
            if (length > totalCount - cursor) {
                length = totalCount - cursor;
                nextPage = false;
            } else if (length == (totalCount - cursor)) {
                nextPage = false;
            }
            Escrow[] memory items = new Escrow[](length);
            for (uint256 i = 0; i < length; i++) {
                items[i] = idToEscrow[cursor + i + 1];
            }
            return (items, totalCount, nextPage, (cursor + length));
        } else {
            bool nextPage = true;
            if (length > addressToEscrowCount[msg.sender] - cursor) {
                length = addressToEscrowCount[msg.sender] - cursor;
                nextPage = false;
            } else if (length == (addressToEscrowCount[msg.sender] - cursor)) {
                nextPage = false;
            }
            Escrow[] memory items = new Escrow[](length);
            for (uint256 i = 0; i < length; i++) {
                items[i] = idToEscrow[
                    addressToEscrowIndexes[msg.sender][cursor + i + 1]
                ];
            }
            return (
                items,
                addressToEscrowCount[msg.sender],
                nextPage,
                (cursor + length)
            );
        }
    }

    function fetchEscrow(uint256 escrowId) public view returns (Escrow memory) {
        return idToEscrow[escrowId];
    }
}
